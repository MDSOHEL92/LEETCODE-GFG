class Solution {
  public:
    struct trieNode {
        bool isEndOfWord;
        trieNode* children[26];
    };
    
    trieNode* getNode(){
        trieNode* newNode = new trieNode();
        newNode->isEndOfWord = false;
        for(int i=0;i<26;i++){
            newNode->children[i] = nullptr;
        }
        return newNode;
    }
    
    void insert(trieNode* pCrawl,string& str){
        for(auto ch : str){
            if(pCrawl->children[ch-'a']==nullptr){
                pCrawl->children[ch-'a']= getNode();
            }
            pCrawl = pCrawl->children[ch-'a'];
        }
        pCrawl->isEndOfWord = true;
    }
    
    bool search(trieNode* pCrawl,string &str){
        for(auto ch : str){
            if(!pCrawl->children[ch-'a'] or !pCrawl->children[ch-'a']->isEndOfWord){
                return false;
            }
            pCrawl = pCrawl->children[ch-'a'];
        }
        
        return true;
    }
    
  
    string longestString(vector<string> &arr) {
        trieNode* root = getNode();
        for(auto str : arr){
            insert(root,str);
        }
        
        int maxLen = 0;
        string ans = "";
        
        for(auto str : arr){
            int len = str.length();
            if(len>=maxLen and search(root,str)){
                if(len > maxLen){
                    maxLen = len;
                    ans = str;
                }
                else{
                    ans = min(ans,str);
                }
            }
        }
        
        return ans;
    }
};
