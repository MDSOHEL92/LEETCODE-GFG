class Solution {
  public:
    vector<int> findOrder(int n, vector<vector<int>> &prerequisites) {
        // code here
        vector<int> order;
        vector<int> indegree(n, 0);
        vector<vector<int>> graph(n);
        
        for(auto& p: prerequisites){
            graph[p[1]].push_back(p[0]);
            indegree[p[0]]++;
        }
        queue<int> q;
        for(int i=0; i<n; i++){
            if(indegree[i] == 0) q.push(i);
        }
        while(!q.empty()){
            int node = q.front(); q.pop();
            order.push_back(node);
            for(int neighbor : graph[node]){
                indegree[neighbor]--;
                if(indegree[neighbor]== 0) q.push(neighbor);
            }
        }
        return order.size() == n  ? order : vector<int>();
    }
};
