class Solution {
public:
    int trapRainWater(vector<vector<int>>& heightMap) {
        int m = heightMap.size();
        if (m == 0)
            return 0;
        int n = heightMap[0].size();

        vector<vector<bool>> visited(m, vector<bool>(n, false));
        priority_queue<pair<int, pair<int, int>>,
                       vector<pair<int, pair<int, int>>>,
                       greater<pair<int, pair<int, int>>>>
            pq;

        for (int i = 0; i < m; i++) {
            pq.push({heightMap[i][0], {i, 0}});
            pq.push({heightMap[i][n - 1], {i, n - 1}});
            visited[i][0] = visited[i][n - 1] = true;
        }
        for (int j = 0; j < n; j++) {
            pq.push({heightMap[0][j], {0, j}});
            pq.push({heightMap[m - 1][j], {m - 1, j}});
            visited[0][j] = visited[m - 1][j] = true;
        }

        vector<pair<int, int>> dirs = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};

        int water = 0;
        while (!pq.empty()) {
            auto top = pq.top();
            pq.pop();
            int h = top.first;
            int x = top.second.first;
            int y = top.second.second;

            for (auto d : dirs) {
                int nx = x + d.first;
                int ny = y + d.second;
                if (nx < 0 || ny < 0 || nx >= m || ny >= n || visited[nx][ny])
                    continue;

                visited[nx][ny] = true;

                if (heightMap[nx][ny] < h) {
                    water += h - heightMap[nx][ny];
                }
                pq.push({max(heightMap[nx][ny], h), {nx, ny}});
            }
        }

        return water;
    }
};
