class Solution {
  public:
  int dp[101][101][101];

    
    int solve(string& s1, string& s2, string& s3, int i, int j, int k) {
        
        if (i == 0 || j == 0 || k == 0) {
            return 0;
        }

        if (dp[i][j][k] != -1) {
            return dp[i][j][k];
        }
       
        if (s1[i - 1] == s2[j - 1] && s2[j - 1] == s3[k - 1]) {
            return dp[i][j][k] = 1 + solve(s1, s2, s3, i - 1, j - 1, k - 1);
        }

        return dp[i][j][k] = max({
            solve(s1, s2, s3, i - 1, j, k),
            solve(s1, s2, s3, i, j - 1, k),   
            solve(s1, s2, s3, i, j, k - 1)    
        });
  }
    int lcsOf3(string& s1, string& s2, string& s3) {
        // mrmdsohel
      int n1 = s1.size(), n2 = s2.size(), n3= s3.size();
      
      memset(dp, -1, sizeof(dp));
      
      return solve(s1, s2, s3, n1, n2, n3);
        
    }
};
