class Solution {
public:
    int n;
    
    bool dfs(vector<vector<int>>& A, vector<vector<int>>& visited, int i, int j, int time) {
        if (i == n - 1 && j == n - 1) return true;
        visited[i][j] = 1;

        vector<pair<int, int>> dir = {{0,1}, {1,0}, {0,-1}, {-1,0}};
        for (auto [dx, dy] : dir) {
            int x = i + dx, y = j + dy;
            if (x >= 0 && y >= 0 && x < n && y < n && !visited[x][y] && A[x][y] <= time) {
                if (dfs(A, visited, x, y, time)) return true;
            }
        }
        return false;
    }
    int swimInWater(vector<vector<int>>& A) {
        n = A.size();
        int left = max(A[0][0], A[n-1][n-1]); 
        int right = n * n - 1;                
        int ans = right;

        while (left <= right) {
            int mid = left + (right - left) / 2;
            vector<vector<int>> visited(n, vector<int>(n, 0));

            if (A[0][0] <= mid && dfs(A, visited, 0, 0, mid)) {
                ans = mid;
                right = mid - 1;
            } else {
                left = mid + 1;
            }
        }
        return ans;
    }
};
