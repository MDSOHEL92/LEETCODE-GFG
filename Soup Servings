 Soup Servings
class Solution {
public:
    vector<vector<int>> dir = {{100, 0}, {75, 25}, {50, 50}, {25, 75}};
    vector<vector<double>> memo; // Memoization table

    double solve(int a, int b) {
        if (a <= 0 && b <= 0) return 0.5;
        if (a <= 0) return 1;
        if (b <= 0) return 0;

        if (memo[a][b] != -1) {
            return memo[a][b];
        }

        double ans = 0;
        for (int i = 0; i < 4; i++) {
            int x = a - dir[i][0];
            int y = b - dir[i][1];
            ans += solve(x, y);
        }

        return memo[a][b] = 0.25 * ans;
    }

    double soupServings(int n) {
      if(n >= 4000) return 1;
        memo = vector<vector<double>>(n + 1, vector<double>(n + 1, -1.0));
        return solve(n, n);
    }
};
